const fs = require('fs');

const generateEmojis = () => {
  const saveDir = `./src/xml`
  const svgDir = `./assets/svgs/`;

  let emojiIndexOutput = `/**
 * Generated by scripts/generate-emojis.js
 * DO NOT EDIT!
 */

`;

let emojiMap = {};

let emojiStoryOutput = `/**
 * Generated by scripts/generate-emojis.js
 * DO NOT EDIT!
 */

import { storiesOf } from '@storybook/react-native';
import { Story, UseCase } from '@taimoormk/react-native-commons-collection/views';
import React, { ReactElement } from 'react';
import { EmojiWrapper, StyledScrollView, StyledView, TextWrapper } from './styled';
import { Emoji } from '../src/emoji';

storiesOf('Emoji', module)
  `;

  // Read root Svg emoji directory
  fs.readdirSync(svgDir).forEach(level1fileName => {
    if (level1fileName === '.DS_Store') return;

    let emojiListOutput = `/**
 * Generated by scripts/generate-emojis.js
 * DO NOT EDIT!
 */

`;

    const level2Dir = `${svgDir}${level1fileName}`;
    fs.readdirSync(level2Dir).forEach(level2FileName => {
      if (level2FileName === '.DS_Store') return;

      emojiMap[`${level1fileName}-${level2FileName}`] = {};

      const level3Dir = `${level2Dir}/${level2FileName}`;

      // Read sub-directory
      return fs.readdirSync(level3Dir).forEach(level3FileName => {
        // trim qoutes & .svg off level3FileName
        let trimmedStr = level3FileName.replace(/(.svg)|-/g, '');
        let svgContent = fs.readFileSync(`${level3Dir}/${level3FileName}`, 'utf8');
        emojiListOutput += `export const ${trimmedStr} = () : string => \`${svgContent}\`;
`;

      emojiMap[`${level1fileName}-${level2FileName}`][trimmedStr] = () => `<EmojiWrapper>
              <Emoji emoji="${trimmedStr}" />
              <TextWrapper>
                ${trimmedStr}
              </TextWrapper>
            </EmojiWrapper>`;

      emojiIndexOutput += `export { ${trimmedStr} } from './${level1fileName}';
`;

      fs.writeFileSync(`${saveDir}/${level1fileName}.ts`, emojiListOutput);
      fs.writeFileSync(`${saveDir}/index.ts`, emojiIndexOutput);
      });
    });

  });
  Object.keys(emojiMap).map(category => {
    emojiStoryOutput += `.add('${category}', () : ReactElement => (
    <Story>
      <UseCase
        text="Emoji => ${category}"
      >
        <StyledScrollView>
          <StyledView>
            ${Object.values(emojiMap[category]).map(value => value()).join('')}
          </StyledView>
        </StyledScrollView>
      </UseCase>
    </Story>
  ))
`;
  });
  fs.writeFileSync(`./__stories__/emoji.story.tsx`, emojiStoryOutput);
};

generateEmojis();
